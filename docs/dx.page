<page xmlns="http://projectmallard.org/1.0/"
      type="guide"
      id="dx">
<info>
  <link type="guide" xref="index"/>
</info>
<title>Developer Edition</title>
<p>Bluefin "DX"</p>

<p>Bluefin Developer Experience (<code>bluefin-dx</code>) is a dedicated developer image with bundled tools. Unlike traditional Linux systems, the operating system and developer environment are explicitly and purposely separated. </p>
<p>This means that tooling is not installed on the host, and is instead containerized, in a virtual machine, or scoped to the user's home directory. It is designed to meet the following use cases:</p>
<list>
<item><p>Endeavors to be the world's most powerful <link type="seealso" href="https://landscape.cncf.io/">cloud native developer environment</link></p></item>
<item><p>Full virtualization support</p></item>
<item><p>Provide fleet management of Bluefin and other Linux systems via <link type="seealso" href="https://cockpit-project.org/">Cockpit</link> (Incomplete, needs a volunteer!)</p></item>
</list>

<section>
 <title>The Cloud Native Approach</title>
 <p>Bluefin goes "all in" on cloud native development and is used differently than a traditional distribution such as Ubuntu:</p>
 <list>
 <item><p>GUI apps are installed via Flatpak</p></item>
 <item><p>Development is done in <link type="seealso" href="https://containers.dev/">devcontainers</link></p></item>
 <item><p>Command line applications are installed using <link type="seealso" href="https://brew.sh">homebrew</link></p></item>
 <item><p>Preconfigured ad-hoc containers for Ubuntu, Fedora, Wolfi, and a custom <code>bluefin-cli</code> container. Use whichever distribution you want. </p></item>
 </list>
 <p>We strive to remove host level package management completely and consider these components as seperate layers. Communication between components is typically done via Flatpak Portals or via the container runtime. </p>

 <p>This differs from apt, snap, and dnf where one packaging system handles both the graphical applications AND the command line applications.  This decoupling is what provides greater system reliability, near unlimited choice of software, and "distributed by default" development.  </p>

 <p>In short, we picked it because this pattern is how servers are deployed in modern infrastructure. And the developers deploying those systems are already using homebrew and we want to leverage as much of that success as possible for the Linux desktop.</p>
</section>

<section>
 <title>Introduction</title>
 <p>The pattern in <code>bluefin-dx</code> is centered around container focused development using <link type="seealso" href="https://containers.dev">devcontainers</link>.  Since development is not dependent on the operating system image, you can use whatever you want, you do not need to use everything in here in order to be productive -- think of them as prepaved paths that you can choose to use.  </p>
 <p>Dev Containers were chosen to facilitate distributed development, each project has a declarative environment that is intended to be start the user with a "best practice" cloud-native workflow out of the box. The <link type="seealso" href="https://www.daytona.io/dotfiles/ultimate-guide-to-dev-containers">Ultimate Guide to Dev Containers</link> has a good write up of the advantages of using devcontainers.</p>
 <p>Homebrew can also be used for installation of development tools. </p>

 <p><em style="strong">Note</em>: This is an opinionated developer workflow that <link type="seealso" href="https://docs.fedoraproject.org/en-US/fedora-silverblue/toolbox/">differs from Fedora's use of toolbox</link>.  Toolbox is included for people who prefer the upstream approach. </p>
</section>

<section>
 <title>Instructions</title>
 <p>Any Bluefin machine can turn on DX mode, ISOs are also provided for new installations.</p>
</section>

<section>
 <subtitle>Clean Installation</subtitle>
</section>

<section>
 <title><link type="seealso" href="https://download.projectbluefin.io/bluefin-dx-gts.iso"><em style="strong">bluefin-dx-gts.iso</em></link> <link type="seealso" href="https://download.projectbluefin.io/bluefin-dx-gts-CHECKSUM">(checksum)</link></title>
 <p>Recommended for developers with AMD and Intel based GPUs (3.7GB, based on Fedora 38)  </p>
</section>

<section>
 <title><link type="seealso" href="https://download.projectbluefin.io/bluefin-dx-nvidia-gts.iso"><em style="strong">bluefin-dx-nvidia-gts.iso</em></link> <link type="seealso" href="https://download.projectbluefin.io/bluefin-dx-nvidia-gts-CHECKSUM">(checksum)</link></title>
 <p>Recommended for developers with Nvidia GPUs (5.4GB, based on Fedora 38)  </p>
 <list>
 <item><p>If you are an experienced user who is comfortable troubleshooting and contributing feedback use: <link type="seealso" href="https://download.projectbluefin.io/bluefin-dx-latest.iso"><em style="strong">bluefin-dx-latest.iso</em></link> <link type="seealso" href="https://download.projectbluefin.io/bluefin-dx-latest-CHECKSUM">(checksum)</link> / <link type="seealso" href="https://download.projectbluefin.io/bluefin-dx-nvidia-latest.iso"><em style="strong">bluefin-dx-nvidia-latest.iso</em></link> <link type="seealso" href="https://download.projectbluefin.io/bluefin-dx-nvidia-latest-CHECKSUM">(checksum)</link>  </p></item>
 </list>
</section>

<section>
 <subtitle>Enabling Developer Mode on an existing Bluefin installation</subtitle>
 <p>You can rebase to <code>bluefin-dx</code> by using the following command:</p>
 <p><em style="strong">Step 1 of 2</em> - <code>ujust devmode</code> to enable or disable the dx mode, then reboot:</p>
 <p><media type="image" src="upload://7QIynueGfdPL9TzPqaNfjvMxIup.png" mime="image/png" /></p>
 <p><em style="strong">Step 2 of 2</em> - <code>ujust dx-group</code> - to add your user account to the right groups. Then log out and back in. This step only needs to be done once. </p>
 <p>Like all Universal Blue images, switching is atomic, allowing for clean switching between modes depending on the use case.</p>
</section>

<section>
 <title>Features</title>
</section>

<section>
 <subtitle>Quality of Life Improvements</subtitle>
 <list>
 <item><p><link type="seealso" href="https://cockpit-project.org/">Cockpit</link> for local and remote management</p></item>
 <item><p>A collection of well curated monospace fonts</p></item>
 <item><p><link type="seealso" href="https://universal-blue.discourse.group/docs?topic=290">Tailscale</link> for VPN</p></item>
 <item><p><link type="seealso" href="https://github.com/casey/just">Just</link> task runner for post-install automation tasks. Check out <link type="seealso" href="https://universal-blue.org/guide/just/">our documentation</link> for more information on using and customizing just.</p></item>
 <item><p><code>fish</code> and <code>zsh</code> available as optional shells, use <code>ujust fish</code> or <code>ujust zsh</code> and follow the prompts to configure them</p></item>
 </list>
</section>

<section>
 <subtitle>Visual Studio Code with Docker</subtitle>
 <p><link type="seealso" href="https://code.visualstudio.com/">Visual Studio Code</link> is included on the image as the default IDE. It comes with the <link type="seealso" href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers">devcontainers extension</link> already installed. It's the recommended developer experience, start here if you're new to containerized development! </p>
 <list>
 <item><p><link type="seealso" href="https://code.visualstudio.com/docs/devcontainers/containers">Dev Containers Documentation</link> - you can skip most of the installation instructions and go directly to <link type="seealso" href="https://code.visualstudio.com/docs/devcontainers/tutorial#_install-the-extension">the tutorial</link></p></item>
 <item><p><link type="seealso" href="https://containers.dev/">Dev Containers Specification</link> </p></item>
 <item><p><link type="seealso" href="https://www.youtube.com/watch?v=b1RavPr_878">Beginner's Series to: Dev Containers</link> - great introductory tutorial from the <link type="seealso" href="https://www.youtube.com/@code/videos">VS Code YouTube channel</link></p></item>
 </list>
 <p>The most current <link type="seealso" href="https://docs.docker.com/engine/">Docker Engine</link> is included by default and is set up to be the default container runtime for vscode. <link type="seealso" href="https://devpod.sh/docs/what-is-devpod">DevPod</link> is included to use devcontainer functionality across clouds and self-hosted setups. </p>
 <list>
 <item><p>Follow <link type="seealso" href="https://devpod.sh/docs/getting-started/quickstart-vscode">Quickstart VS Code</link> to set up the environment.</p></item>
 </list>
</section>

<section>
 <title>Command Line Experience</title>
 <p>Manage your containers with Ptyxis's built in container support: </p>
 <p><media type="image" src="upload://8zQ13uWjjidPRtjflQ3CoSZCCUu.png" mime="image/png" /></p>
 <p><link type="seealso" href="https://universal-blue.discourse.group/docs?topic=300">Ptyxis</link> also includes a host terminal so that you can quickly switch between containers and the host. </p>
 <list>
 <item><p>Further instructions on using Ptyxis: https://universal-blue.discourse.group/docs?topic=300</p></item>
 </list>
</section>

<section>
 <title>Other Tooling</title>
</section>

<section>
 <subtitle>JetBrains</subtitle>
 <p><code>ujust jetbrains-toolbox</code> will fetch and install the <link type="seealso" href="https://www.jetbrains.com/toolbox-app">JetBrains Toolbox</link> application, which will manage the installation of the JetBrains set of tools. This application will handle installation, removal, and upgrade of the JetBrains products, and is handled completely in your home directory, independent of the operating system image.</p>
 <p>Check the <link type="seealso" xref="https://www.jetbrains.com/help/idea/podman">Jetbrains documentation</link> for integrating those tools with the podman runtime. Also check out how to <link type="seealso" xref="https://www.jetbrains.com/help/idea/connect-to-devcontainer">setup Jetbrains with devcontainers</link></p>
 <list>
 <item><p><link type="seealso" href="https://toolbox-support.jetbrains.com/hc/en-us/articles/115001313270-How-to-uninstall-Toolbox-App-">Uninstallation instructions</link></p></item>
 </list>
</section>

<section>
 <subtitle>Kubernetes and other Cloud Native Tooling</subtitle>
 <list>
 <item><p><link type="seealso" href="https://kind.sigs.k8s.io/">kind</link> - Run a Kubernetes cluster on your machine. Run <code>kind create cluster</code> on the host to get started!</p></item>
 <item><p><link type="seealso" href="https://kubernetes.io/docs/reference/kubectl/">kubectl</link> - Administer Kubernetes Clusters</p></item>
 <item><p>helm, ko, flux, minio-client -- if it's an incubated project we intend to add it where appropriate</p></item>
 </list>
</section>

<section>
 <subtitle>Virtualization and Container Runtimes</subtitle>
 <list>
 <item><p><link type="seealso" href="https://virt-manager.org/">virt-manager</link> and associated tooling (KVM, qemu)</p></item>
 <item><p><link type="seealso" href="https://linuxcontainers.org/incus/">Incus</link> provides system containers</p></item>
 <item><p><link type="seealso" href="https://linuxcontainers.org/">LXC</link> and <link type="seealso" href="https://ubuntu.com/lxd">LXD</link> are also provided for compatability reasons </p></item>
 </list>
</section>

<section>
 <subtitle>Podman Development</subtitle>
 <p>All the upstream <code>podman</code> tools are included. This is the default system container runtime, and is the recommended developer configuration that Fedora ships with. </p>
 <list>
 <item><p>Install the <link type="seealso" href="https://flathub.org/apps/io.podman_desktop.PodmanDesktop">Podman Desktop application</link> for graphical use. </p></item>
 </list>

 <p>Though <code>bluefin-dx</code> defaults to docker and vscode for development, all of the Fedora upstream tools are included for those that prefer that experience.</p>
</section>


</page>
